{"version":3,"sources":["app_component/weather-component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","useState","undefined","icon","celsius","descrition","weather","WeatherData","calCelsius","temp","Math","floor","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","get_WeatherIcon","icons","rangeID","getWeather","event","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","sys","main","id","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.050fa94e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props)=>{\r\n    return (\r\n \r\n    <div className=\"col d-flex justify-content-center text-light\">\r\n        <div className=\"cards pt-4\">\r\n            <h1>{props.city}</h1>\r\n            <h5 className=\"py-4\">\r\n                <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n            </h5>\r\n            {props.temp_celsius?(<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>):null}\r\n            {minmaxTemp(props.temp_min,props.temp_max)}\r\n            <h4 className=\"py-4\">{props.description}</h4>\r\n        </div>\r\n    </div>\r\n   \r\n    );\r\n}\r\n\r\nfunction minmaxTemp(min,max) {\r\n    if(min && max)\r\n    {return (\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n    )\r\n    }\r\n\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props => {\r\n\r\n    return (\r\n        <div className=\"container\">\r\n        <div>{props.error?error():null}</div>\r\n        <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"city\"/>\r\n\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"country\"/>\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 text-md-left py-2\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error(){\r\n    return (\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter city and country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useState } from 'react';\nimport Weather from './app_component/weather-component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './app_component/form.component';\nimport './index.css'\nconst API_key =\"7423ba7452e4d16630ac165851af02ea\";\n\n// API CALL api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}\n\n\nfunction App() {\n  let [weather,WeatherData] = useState({\n    city:undefined,\n    icon:undefined,\n    celsius:undefined,\n    temp_max:undefined,\n    temp_min:undefined,\n    descrition:\"\",\n    error:false,\n  })\n\n// const mounted = useRef();\n\n  function calCelsius(temp){\n    let cell = Math.floor(temp-273.15);\n    return cell\n  }\n\n  let weatherIcon = {\n    Thunderstorm:\"wi-thunderstorm\",\n    Drizzle : \"wi-sleet\",\n    Rain: \"wi-storm-showers\",\n    Snow:\"wi-snow\",\n    Atmosphere:\"wi-fog\",\n    Clear:\"wi-day-sunny\",\n    Clouds:\"wi-day-fog\"\n  }\n\n  function get_WeatherIcon(icons,rangeID){\n    let icon = undefined\n      switch(true)\n      {\n        case rangeID >=200 && rangeID<=232:\n          icon=weatherIcon.Thunderstorm\n        break;\n        case rangeID >=300 && rangeID<=321:\n          icon=weatherIcon.Drizzle\n        break;\n        case rangeID >=500 && rangeID<=531:\n          icon=weatherIcon.Rain \n        break;\n        case rangeID >=600 && rangeID<=622:\n          icon=weatherIcon.Snow \n        break;\n        case rangeID >=701 && rangeID<=781:\n          icon=weatherIcon.Atmosphere \n        break;\n        case rangeID===800:\n          icon=weatherIcon.Clear\n        break;\n        case rangeID >=801 && rangeID<=8042:\n          icon=weatherIcon.Clouds \n        break;\n        default:\n            icon=weatherIcon.Clouds \n      }\n      return icon\n      \n  }\n\n  const getWeather = async (event)=>{\n    event.preventDefault()\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n\n    if(city && country)\n    {\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n    const response = await api_call.json()\n    WeatherData({\n      city:`${response.name} , ${response.sys.country}`,\n    celsius:calCelsius(response.main.temp),\n    temp_max:calCelsius(response.main.temp_max),\n    temp_min:calCelsius(response.main.temp_min),\n    description:response.weather[0].description,\n    icon:get_WeatherIcon(weatherIcon,response.weather[0].id),\n    error:false,\n    })\n  }else \n  {\n    WeatherData((prev)=>{\n      return {\n        ...prev,\n        error:true,\n      }\n    })\n  }\n\n    \n  }\n\n\n\n  \n\n  // useEffect(() => {\n  //   if (!mounted.current) {\n  //     getWeather()\n  //     mounted.current = true;\n  //   } \n  // });\n \n  return (\n    <div className=\"App\">\n    <Form loadweather={getWeather} error={weather.error}/>\n     <Weather city={weather.city}\n       temp_celsius = {weather.celsius}\n       temp_max={weather.temp_max}\n       temp_min = {weather.temp_min}\n      description = {weather.description}\n      weatherIcon = {weather.icon}       \n\n     />\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}